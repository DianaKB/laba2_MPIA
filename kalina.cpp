#include <iostream>
#include <cstdint>

using std::cout, std::endl, std::int8_t, std::uint8_t, std::uint64_t, std::uint32_t;

uint8_t s_[4][256] =
        {{0xA8, 0x43, 0x5F, 0x06, 0x6B, 0x75, 0x6C, 0x59, 0x71, 0xDF, 0x87, 0x95, 0x17, 0xF0, 0xD8, 0x09,
                 0x6D, 0xF3, 0x1D, 0xCB, 0xC9, 0x4D, 0x2C, 0xAF, 0x79, 0xE0, 0x97, 0xFD, 0x6F, 0x4B, 0x45, 0x39,
                 0x3E, 0xDD, 0xA3, 0x4F, 0xB4, 0xB6, 0x9A, 0x0E, 0x1F, 0xBF, 0x15, 0xE1, 0x49, 0xD2, 0x93, 0xC6,
                 0x92, 0x72, 0x9E, 0x61, 0xD1, 0x63, 0xFA, 0xEE, 0xF4, 0x19, 0xD5, 0xAD, 0x58, 0xA4, 0xBB, 0xA1,
                 0xDC, 0xF2, 0x83, 0x37, 0x42, 0xE4, 0x7A, 0x32, 0x9C, 0xCC, 0xAB, 0x4A, 0x8F, 0x6E, 0x04, 0x27,
                 0x2E, 0xE7, 0xE2, 0x5A, 0x96, 0x16, 0x23, 0x2B, 0xC2, 0x65, 0x66, 0x0F, 0xBC, 0xA9, 0x47, 0x41,
                 0x34, 0x48, 0xFC, 0xB7, 0x6A, 0x88, 0xA5, 0x53, 0x86, 0xF9, 0x5B, 0xDB, 0x38, 0x7B, 0xC3, 0x1E,
                 0x22, 0x33, 0x24, 0x28, 0x36, 0xC7, 0xB2, 0x3B, 0x8E, 0x77, 0xBA, 0xF5, 0x14, 0x9F, 0x08, 0x55,
                 0x9B, 0x4C, 0xFE, 0x60, 0x5C, 0xDA, 0x18, 0x46, 0xCD, 0x7D, 0x21, 0xB0, 0x3F, 0x1B, 0x89, 0xFF,
                 0xEB, 0x84, 0x69, 0x3A, 0x9D, 0xD7, 0xD3, 0x70, 0x67, 0x40, 0xB5, 0xDE, 0x5D, 0x30, 0x91, 0xB1,
                 0x78, 0x11, 0x01, 0xE5, 0x00, 0x68, 0x98, 0xA0, 0xC5, 0x02, 0xA6, 0x74, 0x2D, 0x0B, 0xA2, 0x76,
                 0xB3, 0xBE, 0xCE, 0xBD, 0xAE, 0xE9, 0x8A, 0x31, 0x1C, 0xEC, 0xF1, 0x99, 0x94, 0xAA, 0xF6, 0x26,
                 0x2F, 0xEF, 0xE8, 0x8C, 0x35, 0x03, 0xD4, 0x7F, 0xFB, 0x05, 0xC1, 0x5E, 0x90, 0x20, 0x3D, 0x82,
                 0xF7, 0xEA, 0x0A, 0x0D, 0x7E, 0xF8, 0x50, 0x1A, 0xC4, 0x07, 0x57, 0xB8, 0x3C, 0x62, 0xE3, 0xC8,
                 0xAC, 0x52, 0x64, 0x10, 0xD0, 0xD9, 0x13, 0x0C, 0x12, 0x29, 0x51, 0xB9, 0xCF, 0xD6, 0x73, 0x8D,
                 0x81, 0x54, 0xC0, 0xED, 0x4E, 0x44, 0xA7, 0x2A, 0x85, 0x25, 0xE6, 0xCA, 0x7C, 0x8B, 0x56, 0x80},
         {0xCE, 0xBB, 0xEB, 0x92, 0xEA, 0xCB, 0x13, 0xC1, 0xE9, 0x3A, 0xD6, 0xB2, 0xD2, 0x90, 0x17, 0xF8,
                 0x42, 0x15, 0x56, 0xB4, 0x65, 0x1C, 0x88, 0x43, 0xC5, 0x5C, 0x36, 0xBA, 0xF5, 0x57, 0x67, 0x8D,
                 0x31, 0xF6, 0x64, 0x58, 0x9E, 0xF4, 0x22, 0xAA, 0x75, 0x0F, 0x02, 0xB1, 0xDF, 0x6D, 0x73, 0x4D,
                 0x7C, 0x26, 0x2E, 0xF7, 0x08, 0x5D, 0x44, 0x3E, 0x9F, 0x14, 0xC8, 0xAE, 0x54, 0x10, 0xD8, 0xBC,
                 0x1A, 0x6B, 0x69, 0xF3, 0xBD, 0x33, 0xAB, 0xFA, 0xD1, 0x9B, 0x68, 0x4E, 0x16, 0x95, 0x91, 0xEE,
                 0x4C, 0x63, 0x8E, 0x5B, 0xCC, 0x3C, 0x19, 0xA1, 0x81, 0x49, 0x7B, 0xD9, 0x6F, 0x37, 0x60, 0xCA,
                 0xE7, 0x2B, 0x48, 0xFD, 0x96, 0x45, 0xFC, 0x41, 0x12, 0x0D, 0x79, 0xE5, 0x89, 0x8C, 0xE3, 0x20,
                 0x30, 0xDC, 0xB7, 0x6C, 0x4A, 0xB5, 0x3F, 0x97, 0xD4, 0x62, 0x2D, 0x06, 0xA4, 0xA5, 0x83, 0x5F,
                 0x2A, 0xDA, 0xC9, 0x00, 0x7E, 0xA2, 0x55, 0xBF, 0x11, 0xD5, 0x9C, 0xCF, 0x0E, 0x0A, 0x3D, 0x51,
                 0x7D, 0x93, 0x1B, 0xFE, 0xC4, 0x47, 0x09, 0x86, 0x0B, 0x8F, 0x9D, 0x6A, 0x07, 0xB9, 0xB0, 0x98,
                 0x18, 0x32, 0x71, 0x4B, 0xEF, 0x3B, 0x70, 0xA0, 0xE4, 0x40, 0xFF, 0xC3, 0xA9, 0xE6, 0x78, 0xF9,
                 0x8B, 0x46, 0x80, 0x1E, 0x38, 0xE1, 0xB8, 0xA8, 0xE0, 0x0C, 0x23, 0x76, 0x1D, 0x25, 0x24, 0x05,
                 0xF1, 0x6E, 0x94, 0x28, 0x9A, 0x84, 0xE8, 0xA3, 0x4F, 0x77, 0xD3, 0x85, 0xE2, 0x52, 0xF2, 0x82,
                 0x50, 0x7A, 0x2F, 0x74, 0x53, 0xB3, 0x61, 0xAF, 0x39, 0x35, 0xDE, 0xCD, 0x1F, 0x99, 0xAC, 0xAD,
                 0x72, 0x2C, 0xDD, 0xD0, 0x87, 0xBE, 0x5E, 0xA6, 0xEC, 0x04, 0xC6, 0x03, 0x34, 0xFB, 0xDB, 0x59,
                 0xB6, 0xC2, 0x01, 0xF0, 0x5A, 0xED, 0xA7, 0x66, 0x21, 0x7F, 0x8A, 0x27, 0xC7, 0xC0, 0x29, 0xD7},
         {0x93, 0xD9, 0x9A, 0xB5, 0x98, 0x22, 0x45, 0xFC, 0xBA, 0x6A, 0xDF, 0x02, 0x9F, 0xDC, 0x51, 0x59,
                 0x4A, 0x17, 0x2B, 0xC2, 0x94, 0xF4, 0xBB, 0xA3, 0x62, 0xE4, 0x71, 0xD4, 0xCD, 0x70, 0x16, 0xE1,
                 0x49, 0x3C, 0xC0, 0xD8, 0x5C, 0x9B, 0xAD, 0x85, 0x53, 0xA1, 0x7A, 0xC8, 0x2D, 0xE0, 0xD1, 0x72,
                 0xA6, 0x2C, 0xC4, 0xE3, 0x76, 0x78, 0xB7, 0xB4, 0x09, 0x3B, 0x0E, 0x41, 0x4C, 0xDE, 0xB2, 0x90,
                 0x25, 0xA5, 0xD7, 0x03, 0x11, 0x00, 0xC3, 0x2E, 0x92, 0xEF, 0x4E, 0x12, 0x9D, 0x7D, 0xCB, 0x35,
                 0x10, 0xD5, 0x4F, 0x9E, 0x4D, 0xA9, 0x55, 0xC6, 0xD0, 0x7B, 0x18, 0x97, 0xD3, 0x36, 0xE6, 0x48,
                 0x56, 0x81, 0x8F, 0x77, 0xCC, 0x9C, 0xB9, 0xE2, 0xAC, 0xB8, 0x2F, 0x15, 0xA4, 0x7C, 0xDA, 0x38,
                 0x1E, 0x0B, 0x05, 0xD6, 0x14, 0x6E, 0x6C, 0x7E, 0x66, 0xFD, 0xB1, 0xE5, 0x60, 0xAF, 0x5E, 0x33,
                 0x87, 0xC9, 0xF0, 0x5D, 0x6D, 0x3F, 0x88, 0x8D, 0xC7, 0xF7, 0x1D, 0xE9, 0xEC, 0xED, 0x80, 0x29,
                 0x27, 0xCF, 0x99, 0xA8, 0x50, 0x0F, 0x37, 0x24, 0x28, 0x30, 0x95, 0xD2, 0x3E, 0x5B, 0x40, 0x83,
                 0xB3, 0x69, 0x57, 0x1F, 0x07, 0x1C, 0x8A, 0xBC, 0x20, 0xEB, 0xCE, 0x8E, 0xAB, 0xEE, 0x31, 0xA2,
                 0x73, 0xF9, 0xCA, 0x3A, 0x1A, 0xFB, 0x0D, 0xC1, 0xFE, 0xFA, 0xF2, 0x6F, 0xBD, 0x96, 0xDD, 0x43,
                 0x52, 0xB6, 0x08, 0xF3, 0xAE, 0xBE, 0x19, 0x89, 0x32, 0x26, 0xB0, 0xEA, 0x4B, 0x64, 0x84, 0x82,
                 0x6B, 0xF5, 0x79, 0xBF, 0x01, 0x5F, 0x75, 0x63, 0x1B, 0x23, 0x3D, 0x68, 0x2A, 0x65, 0xE8, 0x91,
                 0xF6, 0xFF, 0x13, 0x58, 0xF1, 0x47, 0x0A, 0x7F, 0xC5, 0xA7, 0xE7, 0x61, 0x5A, 0x06, 0x46, 0x44,
                 0x42, 0x04, 0xA0, 0xDB, 0x39, 0x86, 0x54, 0xAA, 0x8C, 0x34, 0x21, 0x8B, 0xF8, 0x0C, 0x74, 0x67},
         {0x68, 0x8D, 0xCA, 0x4D, 0x73, 0x4B, 0x4E, 0x2A, 0xD4, 0x52, 0x26, 0xB3, 0x54, 0x1E, 0x19, 0x1F,
                 0x22, 0x03, 0x46, 0x3D, 0x2D, 0x4A, 0x53, 0x83, 0x13, 0x8A, 0xB7, 0xD5, 0x25, 0x79, 0xF5, 0xBD,
                 0x58, 0x2F, 0x0D, 0x02, 0xED, 0x51, 0x9E, 0x11, 0xF2, 0x3E, 0x55, 0x5E, 0xD1, 0x16, 0x3C, 0x66,
                 0x70, 0x5D, 0xF3, 0x45, 0x40, 0xCC, 0xE8, 0x94, 0x56, 0x08, 0xCE, 0x1A, 0x3A, 0xD2, 0xE1, 0xDF,
                 0xB5, 0x38, 0x6E, 0x0E, 0xE5, 0xF4, 0xF9, 0x86, 0xE9, 0x4F, 0xD6, 0x85, 0x23, 0xCF, 0x32, 0x99,
                 0x31, 0x14, 0xAE, 0xEE, 0xC8, 0x48, 0xD3, 0x30, 0xA1, 0x92, 0x41, 0xB1, 0x18, 0xC4, 0x2C, 0x71,
                 0x72, 0x44, 0x15, 0xFD, 0x37, 0xBE, 0x5F, 0xAA, 0x9B, 0x88, 0xD8, 0xAB, 0x89, 0x9C, 0xFA, 0x60,
                 0xEA, 0xBC, 0x62, 0x0C, 0x24, 0xA6, 0xA8, 0xEC, 0x67, 0x20, 0xDB, 0x7C, 0x28, 0xDD, 0xAC, 0x5B,
                 0x34, 0x7E, 0x10, 0xF1, 0x7B, 0x8F, 0x63, 0xA0, 0x05, 0x9A, 0x43, 0x77, 0x21, 0xBF, 0x27, 0x09,
                 0xC3, 0x9F, 0xB6, 0xD7, 0x29, 0xC2, 0xEB, 0xC0, 0xA4, 0x8B, 0x8C, 0x1D, 0xFB, 0xFF, 0xC1, 0xB2,
                 0x97, 0x2E, 0xF8, 0x65, 0xF6, 0x75, 0x07, 0x04, 0x49, 0x33, 0xE4, 0xD9, 0xB9, 0xD0, 0x42, 0xC7,
                 0x6C, 0x90, 0x00, 0x8E, 0x6F, 0x50, 0x01, 0xC5, 0xDA, 0x47, 0x3F, 0xCD, 0x69, 0xA2, 0xE2, 0x7A,
                 0xA7, 0xC6, 0x93, 0x0F, 0x0A, 0x06, 0xE6, 0x2B, 0x96, 0xA3, 0x1C, 0xAF, 0x6A, 0x12, 0x84, 0x39,
                 0xE7, 0xB0, 0x82, 0xF7, 0xFE, 0x9D, 0x87, 0x5C, 0x81, 0x35, 0xDE, 0xB4, 0xA5, 0xFC, 0x80, 0xEF,
                 0xCB, 0xBB, 0x6B, 0x76, 0xBA, 0x5A, 0x7D, 0x78, 0x0B, 0x95, 0xE3, 0xAD, 0x74, 0x98, 0x3B, 0x36,
                 0x64, 0x6D, 0xDC, 0xF0, 0x59, 0xA9, 0x4C, 0x17, 0x7F, 0x91, 0xB8, 0xC9, 0x57, 0x1B, 0xE0, 0x61}};


uint8_t s_inv[4][256] =
        {{0xA4, 0xA2, 0xA9, 0xC5, 0x4E, 0xC9, 0x03, 0xD9, 0x7E, 0x0F, 0xD2, 0xAD, 0xE7, 0xD3, 0x27, 0x5B,
                 0xE3, 0xA1, 0xE8, 0xE6, 0x7C, 0x2A, 0x55, 0x0C, 0x86, 0x39, 0xD7, 0x8D, 0xB8, 0x12, 0x6F, 0x28,
                 0xCD, 0x8A, 0x70, 0x56, 0x72, 0xF9, 0xBF, 0x4F, 0x73, 0xE9, 0xF7, 0x57, 0x16, 0xAC, 0x50, 0xC0,
                 0x9D, 0xB7, 0x47, 0x71, 0x60, 0xC4, 0x74, 0x43, 0x6C, 0x1F, 0x93, 0x77, 0xDC, 0xCE, 0x20, 0x8C,
                 0x99, 0x5F, 0x44, 0x01, 0xF5, 0x1E, 0x87, 0x5E, 0x61, 0x2C, 0x4B, 0x1D, 0x81, 0x15, 0xF4, 0x23,
                 0xD6, 0xEA, 0xE1, 0x67, 0xF1, 0x7F, 0xFE, 0xDA, 0x3C, 0x07, 0x53, 0x6A, 0x84, 0x9C, 0xCB, 0x02,
                 0x83, 0x33, 0xDD, 0x35, 0xE2, 0x59, 0x5A, 0x98, 0xA5, 0x92, 0x64, 0x04, 0x06, 0x10, 0x4D, 0x1C,
                 0x97, 0x08, 0x31, 0xEE, 0xAB, 0x05, 0xAF, 0x79, 0xA0, 0x18, 0x46, 0x6D, 0xFC, 0x89, 0xD4, 0xC7,
                 0xFF, 0xF0, 0xCF, 0x42, 0x91, 0xF8, 0x68, 0x0A, 0x65, 0x8E, 0xB6, 0xFD, 0xC3, 0xEF, 0x78, 0x4C,
                 0xCC, 0x9E, 0x30, 0x2E, 0xBC, 0x0B, 0x54, 0x1A, 0xA6, 0xBB, 0x26, 0x80, 0x48, 0x94, 0x32, 0x7D,
                 0xA7, 0x3F, 0xAE, 0x22, 0x3D, 0x66, 0xAA, 0xF6, 0x00, 0x5D, 0xBD, 0x4A, 0xE0, 0x3B, 0xB4, 0x17,
                 0x8B, 0x9F, 0x76, 0xB0, 0x24, 0x9A, 0x25, 0x63, 0xDB, 0xEB, 0x7A, 0x3E, 0x5C, 0xB3, 0xB1, 0x29,
                 0xF2, 0xCA, 0x58, 0x6E, 0xD8, 0xA8, 0x2F, 0x75, 0xDF, 0x14, 0xFB, 0x13, 0x49, 0x88, 0xB2, 0xEC,
                 0xE4, 0x34, 0x2D, 0x96, 0xC6, 0x3A, 0xED, 0x95, 0x0E, 0xE5, 0x85, 0x6B, 0x40, 0x21, 0x9B, 0x09,
                 0x19, 0x2B, 0x52, 0xDE, 0x45, 0xA3, 0xFA, 0x51, 0xC2, 0xB5, 0xD1, 0x90, 0xB9, 0xF3, 0x37, 0xC1,
                 0x0D, 0xBA, 0x41, 0x11, 0x38, 0x7B, 0xBE, 0xD0, 0xD5, 0x69, 0x36, 0xC8, 0x62, 0x1B, 0x82, 0x8F},
         {0x83, 0xF2, 0x2A, 0xEB, 0xE9, 0xBF, 0x7B, 0x9C, 0x34, 0x96, 0x8D, 0x98, 0xB9, 0x69, 0x8C, 0x29,
                 0x3D, 0x88, 0x68, 0x06, 0x39, 0x11, 0x4C, 0x0E, 0xA0, 0x56, 0x40, 0x92, 0x15, 0xBC, 0xB3, 0xDC,
                 0x6F, 0xF8, 0x26, 0xBA, 0xBE, 0xBD, 0x31, 0xFB, 0xC3, 0xFE, 0x80, 0x61, 0xE1, 0x7A, 0x32, 0xD2,
                 0x70, 0x20, 0xA1, 0x45, 0xEC, 0xD9, 0x1A, 0x5D, 0xB4, 0xD8, 0x09, 0xA5, 0x55, 0x8E, 0x37, 0x76,
                 0xA9, 0x67, 0x10, 0x17, 0x36, 0x65, 0xB1, 0x95, 0x62, 0x59, 0x74, 0xA3, 0x50, 0x2F, 0x4B, 0xC8,
                 0xD0, 0x8F, 0xCD, 0xD4, 0x3C, 0x86, 0x12, 0x1D, 0x23, 0xEF, 0xF4, 0x53, 0x19, 0x35, 0xE6, 0x7F,
                 0x5E, 0xD6, 0x79, 0x51, 0x22, 0x14, 0xF7, 0x1E, 0x4A, 0x42, 0x9B, 0x41, 0x73, 0x2D, 0xC1, 0x5C,
                 0xA6, 0xA2, 0xE0, 0x2E, 0xD3, 0x28, 0xBB, 0xC9, 0xAE, 0x6A, 0xD1, 0x5A, 0x30, 0x90, 0x84, 0xF9,
                 0xB2, 0x58, 0xCF, 0x7E, 0xC5, 0xCB, 0x97, 0xE4, 0x16, 0x6C, 0xFA, 0xB0, 0x6D, 0x1F, 0x52, 0x99,
                 0x0D, 0x4E, 0x03, 0x91, 0xC2, 0x4D, 0x64, 0x77, 0x9F, 0xDD, 0xC4, 0x49, 0x8A, 0x9A, 0x24, 0x38,
                 0xA7, 0x57, 0x85, 0xC7, 0x7C, 0x7D, 0xE7, 0xF6, 0xB7, 0xAC, 0x27, 0x46, 0xDE, 0xDF, 0x3B, 0xD7,
                 0x9E, 0x2B, 0x0B, 0xD5, 0x13, 0x75, 0xF0, 0x72, 0xB6, 0x9D, 0x1B, 0x01, 0x3F, 0x44, 0xE5, 0x87,
                 0xFD, 0x07, 0xF1, 0xAB, 0x94, 0x18, 0xEA, 0xFC, 0x3A, 0x82, 0x5F, 0x05, 0x54, 0xDB, 0x00, 0x8B,
                 0xE3, 0x48, 0x0C, 0xCA, 0x78, 0x89, 0x0A, 0xFF, 0x3E, 0x5B, 0x81, 0xEE, 0x71, 0xE2, 0xDA, 0x2C,
                 0xB8, 0xB5, 0xCC, 0x6E, 0xA8, 0x6B, 0xAD, 0x60, 0xC6, 0x08, 0x04, 0x02, 0xE8, 0xF5, 0x4F, 0xA4,
                 0xF3, 0xC0, 0xCE, 0x43, 0x25, 0x1C, 0x21, 0x33, 0x0F, 0xAF, 0x47, 0xED, 0x66, 0x63, 0x93, 0xAA},
         {0x45, 0xD4, 0x0B, 0x43, 0xF1, 0x72, 0xED, 0xA4, 0xC2, 0x38, 0xE6, 0x71, 0xFD, 0xB6, 0x3A, 0x95,
                 0x50, 0x44, 0x4B, 0xE2, 0x74, 0x6B, 0x1E, 0x11, 0x5A, 0xC6, 0xB4, 0xD8, 0xA5, 0x8A, 0x70, 0xA3,
                 0xA8, 0xFA, 0x05, 0xD9, 0x97, 0x40, 0xC9, 0x90, 0x98, 0x8F, 0xDC, 0x12, 0x31, 0x2C, 0x47, 0x6A,
                 0x99, 0xAE, 0xC8, 0x7F, 0xF9, 0x4F, 0x5D, 0x96, 0x6F, 0xF4, 0xB3, 0x39, 0x21, 0xDA, 0x9C, 0x85,
                 0x9E, 0x3B, 0xF0, 0xBF, 0xEF, 0x06, 0xEE, 0xE5, 0x5F, 0x20, 0x10, 0xCC, 0x3C, 0x54, 0x4A, 0x52,
                 0x94, 0x0E, 0xC0, 0x28, 0xF6, 0x56, 0x60, 0xA2, 0xE3, 0x0F, 0xEC, 0x9D, 0x24, 0x83, 0x7E, 0xD5,
                 0x7C, 0xEB, 0x18, 0xD7, 0xCD, 0xDD, 0x78, 0xFF, 0xDB, 0xA1, 0x09, 0xD0, 0x76, 0x84, 0x75, 0xBB,
                 0x1D, 0x1A, 0x2F, 0xB0, 0xFE, 0xD6, 0x34, 0x63, 0x35, 0xD2, 0x2A, 0x59, 0x6D, 0x4D, 0x77, 0xE7,
                 0x8E, 0x61, 0xCF, 0x9F, 0xCE, 0x27, 0xF5, 0x80, 0x86, 0xC7, 0xA6, 0xFB, 0xF8, 0x87, 0xAB, 0x62,
                 0x3F, 0xDF, 0x48, 0x00, 0x14, 0x9A, 0xBD, 0x5B, 0x04, 0x92, 0x02, 0x25, 0x65, 0x4C, 0x53, 0x0C,
                 0xF2, 0x29, 0xAF, 0x17, 0x6C, 0x41, 0x30, 0xE9, 0x93, 0x55, 0xF7, 0xAC, 0x68, 0x26, 0xC4, 0x7D,
                 0xCA, 0x7A, 0x3E, 0xA0, 0x37, 0x03, 0xC1, 0x36, 0x69, 0x66, 0x08, 0x16, 0xA7, 0xBC, 0xC5, 0xD3,
                 0x22, 0xB7, 0x13, 0x46, 0x32, 0xE8, 0x57, 0x88, 0x2B, 0x81, 0xB2, 0x4E, 0x64, 0x1C, 0xAA, 0x91,
                 0x58, 0x2E, 0x9B, 0x5C, 0x1B, 0x51, 0x73, 0x42, 0x23, 0x01, 0x6E, 0xF3, 0x0D, 0xBE, 0x3D, 0x0A,
                 0x2D, 0x1F, 0x67, 0x33, 0x19, 0x7B, 0x5E, 0xEA, 0xDE, 0x8B, 0xCB, 0xA9, 0x8C, 0x8D, 0xAD, 0x49,
                 0x82, 0xE4, 0xBA, 0xC3, 0x15, 0xD1, 0xE0, 0x89, 0xFC, 0xB1, 0xB9, 0xB5, 0x07, 0x79, 0xB8, 0xE1},
         {0xB2, 0xB6, 0x23, 0x11, 0xA7, 0x88, 0xC5, 0xA6, 0x39, 0x8F, 0xC4, 0xE8, 0x73, 0x22, 0x43, 0xC3,
                 0x82, 0x27, 0xCD, 0x18, 0x51, 0x62, 0x2D, 0xF7, 0x5C, 0x0E, 0x3B, 0xFD, 0xCA, 0x9B, 0x0D, 0x0F,
                 0x79, 0x8C, 0x10, 0x4C, 0x74, 0x1C, 0x0A, 0x8E, 0x7C, 0x94, 0x07, 0xC7, 0x5E, 0x14, 0xA1, 0x21,
                 0x57, 0x50, 0x4E, 0xA9, 0x80, 0xD9, 0xEF, 0x64, 0x41, 0xCF, 0x3C, 0xEE, 0x2E, 0x13, 0x29, 0xBA,
                 0x34, 0x5A, 0xAE, 0x8A, 0x61, 0x33, 0x12, 0xB9, 0x55, 0xA8, 0x15, 0x05, 0xF6, 0x03, 0x06, 0x49,
                 0xB5, 0x25, 0x09, 0x16, 0x0C, 0x2A, 0x38, 0xFC, 0x20, 0xF4, 0xE5, 0x7F, 0xD7, 0x31, 0x2B, 0x66,
                 0x6F, 0xFF, 0x72, 0x86, 0xF0, 0xA3, 0x2F, 0x78, 0x00, 0xBC, 0xCC, 0xE2, 0xB0, 0xF1, 0x42, 0xB4,
                 0x30, 0x5F, 0x60, 0x04, 0xEC, 0xA5, 0xE3, 0x8B, 0xE7, 0x1D, 0xBF, 0x84, 0x7B, 0xE6, 0x81, 0xF8,
                 0xDE, 0xD8, 0xD2, 0x17, 0xCE, 0x4B, 0x47, 0xD6, 0x69, 0x6C, 0x19, 0x99, 0x9A, 0x01, 0xB3, 0x85,
                 0xB1, 0xF9, 0x59, 0xC2, 0x37, 0xE9, 0xC8, 0xA0, 0xED, 0x4F, 0x89, 0x68, 0x6D, 0xD5, 0x26, 0x91,
                 0x87, 0x58, 0xBD, 0xC9, 0x98, 0xDC, 0x75, 0xC0, 0x76, 0xF5, 0x67, 0x6B, 0x7E, 0xEB, 0x52, 0xCB,
                 0xD1, 0x5B, 0x9F, 0x0B, 0xDB, 0x40, 0x92, 0x1A, 0xFA, 0xAC, 0xE4, 0xE1, 0x71, 0x1F, 0x65, 0x8D,
                 0x97, 0x9E, 0x95, 0x90, 0x5D, 0xB7, 0xC1, 0xAF, 0x54, 0xFB, 0x02, 0xE0, 0x35, 0xBB, 0x3A, 0x4D,
                 0xAD, 0x2C, 0x3D, 0x56, 0x08, 0x1B, 0x4A, 0x93, 0x6A, 0xAB, 0xB8, 0x7A, 0xF2, 0x7D, 0xDA, 0x3F,
                 0xFE, 0x3E, 0xBE, 0xEA, 0xAA, 0x44, 0xC6, 0xD0, 0x36, 0x48, 0x70, 0x96, 0x77, 0x24, 0x53, 0xDF,
                 0xF3, 0x83, 0x28, 0x32, 0x45, 0x1E, 0xA4, 0xD3, 0xA2, 0x46, 0x6E, 0x9C, 0xDD, 0x63, 0xD4, 0x9D}};


uint8_t new_s_inv[4][256];


void s_key_inv() {
    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 256; ++j) {
            new_s_inv[i][s_[i][j]] = j;
        }
    }
}

bool analysis_s_key_inv() {
    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 256; ++j) {
            if (s_inv[i][j] != new_s_inv[i][j]) {
                return false;
            }
        }
    }

    return true;
}

uint8_t C1_s_box[10][16] = {
        {0xAF, 0xF9, 0xB8, 0x3F, 0xB5, 0xCB, 0x2E, 0xAD,
                0xB6, 0x6A, 0x08, 0xCE, 0xCD, 0xB4, 0x96, 0x6C},
        {0x57, 0x46, 0x26, 0x21, 0xCF, 0x30, 0xB9, 0x06,
                0x1B, 0xF3, 0x8C, 0x63, 0xE1, 0x91, 0xA0, 0x38},
        {0x96, 0x42, 0xB1, 0x9B, 0x47, 0x2A, 0xCF, 0x71,
                0xBD, 0xE6, 0x68, 0x0A, 0x65, 0xCF, 0x28, 0x89},
        {0xA6, 0xCD, 0xDE, 0xE3, 0x5D, 0x9B, 0x2B, 0x3F,
                0xAC, 0x8E, 0x7C, 0xD6, 0xA0, 0x58, 0x3E, 0x57},
        {0x8D, 0x53, 0x0B, 0x8B, 0xF2, 0xAB, 0x32, 0xC7,
                0x3A, 0x50, 0x3F, 0x7D, 0x74, 0x02, 0x29, 0x9F},
        {0x40, 0x19, 0x54, 0xD8, 0x56, 0x29, 0xA7, 0xBD,
                0x39, 0xF7, 0xF8, 0xFC, 0xD1, 0x58, 0xD5, 0x8A},
        {0x4A, 0x97, 0xD8, 0x57, 0x43, 0x13, 0x6E, 0xD5,
                0x86, 0xCA, 0x52, 0x1D, 0x43, 0x6E, 0x3A, 0xE9},
        {0x96, 0x22, 0xBE, 0x68, 0x82, 0x53, 0x6A, 0xF3,
                0xDE, 0xD0, 0x6D, 0x2B, 0x06, 0xAF, 0x0D, 0x7E},
        {0xAA, 0x4D, 0xF9, 0x79, 0x0D, 0xEF, 0x48, 0x08,
                0xCA, 0x4C, 0x64, 0x03, 0xD6, 0x44, 0xA6, 0x9F},
        {0xD8, 0x5F, 0x98, 0x2C, 0x81, 0xF9, 0x40, 0xF3,
                0x5D, 0x9E, 0x7E, 0xFE, 0x13, 0x8E, 0x21, 0x46}};
uint8_t M1_s_box[10][16] = {
        {0x17, 0xAF, 0x69, 0xBA, 0x9A, 0x05, 0x47, 0xEB,
                0x25, 0x9B, 0xC2, 0x3A, 0x88, 0x13, 0xBD, 0xB0},
        {0xDA, 0xB1, 0xC9, 0x8C, 0xEC, 0x70, 0x66, 0xC5,
                0x8D, 0x43, 0xF8, 0x86, 0x2B, 0x4E, 0xF2, 0x41},
        {0x54, 0x10, 0x7A, 0x68, 0x5E, 0x80, 0x91, 0x5F,
                0xB3, 0xAD, 0xDB, 0xC4, 0x59, 0x8B, 0x98, 0x6C},
        {0xAA, 0xDB, 0x3D, 0xEA, 0x9C, 0x49, 0x12, 0xBA,
                0xE0, 0x52, 0x6D, 0x4A, 0xA7, 0x23, 0x9C, 0xFC},
        {0xEF, 0xD4, 0x71, 0x99, 0x41, 0x46, 0xC8, 0xAF,
                0x93, 0xD0, 0x85, 0xE6, 0xAB, 0x2A, 0x8F, 0x91},
        {0x99, 0x56, 0xF6, 0x6A, 0xFE, 0xFE, 0xE9, 0x1F,
                0x1F, 0x33, 0xFC, 0xDD, 0x34, 0x23, 0x51, 0x19},
        {0x4B, 0x77, 0x23, 0xFC, 0x01, 0x06, 0x75, 0x1B,
                0x68, 0x5F, 0xC0, 0x9B, 0x01, 0xC1, 0xB3, 0x48},
        {0x54, 0x26, 0xC5, 0x00, 0xCF, 0xD4, 0x09, 0x32,
                0x9B, 0xE3, 0x84, 0xC7, 0x03, 0xD7, 0xB6, 0x81},
        {0xBD, 0x2F, 0xB1, 0x1D, 0xD3, 0xA4, 0x5F, 0x39,
                0xFB, 0x50, 0xCD, 0x11, 0xED, 0x36, 0x30, 0x91},
        {0x0E, 0x7F, 0x04, 0x5E, 0xF0, 0xAF, 0x9E, 0x32,
                0x9C, 0x24, 0x77, 0xD4, 0xE6, 0x52, 0xFA, 0x12}};

void s_box(const uint8_t *M, int byte_length, uint8_t *C, uint8_t S[4][256]) {
    for (int i = 0; i < byte_length; ++i) {
        C[i] = S[i % 4][M[i]];
    }
}

bool analysis_s_box_line(const uint8_t *c1, const uint8_t *c2, const int byte_len) {
    for (int i = 0; i < byte_len; ++i) {
        if (c1[i] != c2[i]) {
            return false;
        }
    }
    return true;
}

bool analysis_s_box(uint8_t M[10][16], uint8_t C[10][16], uint8_t S[4][256]) {
    for (int i = 0; i < 10; ++i) {
        uint8_t m_test[16];
        s_box(M[i], 16, m_test, S);
        if (!analysis_s_box_line(m_test, C[i], 16)) {
            return false;
        }
    }
    return true;
}

uint64_t M_xor_rkey[9][2] = {
        {0x16CEDEE8D9990F9E, 0x25B506F042D3B305},
        {0x32F172C7E2D2E1C9, 0x3B4D13958FBCE28D},
        {0x044E672502E945D3, 0x13F24197773D4547},
        {0x73EC521DA9BAF977, 0x7A44212456FE0215},
        {0x5DCBF7EE9765340D, 0x700AB86C7E3CFCBC},
        {0x9EDCE2CB1E774F27, 0x2D2C66281402B14F},
        {0x44B90F555C682F06, 0x8FDB6918B7108ED5},
        {0x1073FCB6ECF68F31, 0xBCB77E752220169C},
        {0x375DCC2C800C45F6, 0x1DD9C471E522E0A6}};

uint64_t RK_xor_rkey[9][2] = {
        {0xE6865B77DCE082A0, 0xF416505E6B9B3AB1},
        {0x7E70876EAE498476, 0x8AAAA00A7C93EC42},
        {0x768AAAA00A7C93EC, 0x427E70876EAE4984},
        {0x45CED4C51E9140F5, 0x3E7276820F0BD9FE},
        {0xF53E7276820F0BD9, 0xFE45CED4C51E9140},
        {0x8C77EE227900C462, 0x515F66320560C4B1},
        {0x62515F66320560C4, 0xB18C77EE227900C4},
        {0x0A9872E25CD2B0B8, 0xAA879A2086A66DD8},
        {0xB8AA879A2086A66D, 0xD80A9872E25CD2B0}};

uint64_t C_xor_rkey[9][2] = {
        {0xF048859F05798D3E, 0xD1A356AE294889B4},
        {0x4C81F5A94C9B65BF, 0xB1E7B39FF32F0ECF},
        {0x72C4CD850895D63F, 0x518C311019930CC3},
        {0x362286D8B72BB982, 0x443657A659F5DBEB},
        {0xA8F58598156A3FD4, 0x8E4F76B8BB226DFC},
        {0x12AB0CE967778B45, 0x7C73001A116275FE},
        {0x26E850336E6D4FC2, 0x3E571EF695698E11},
        {0x1AEB8E54B0243F89, 0x1630E455A4867B44},
        {0x8FF74BB6A08AE39B, 0xC5D35C03077E3216}};

void xor_rkey(const uint64_t *M_xor, const uint64_t *RK_xor, const int C_col, uint64_t *C_xor) {
    for (int i = 0; i < C_col; ++i) {
        C_xor[i] = M_xor[i] ^ RK_xor[i];
    }
}

bool analysis_xor_rkey(const uint64_t M_xor[9][2], const uint64_t RK_xor[9][2], const uint64_t C_xor[9][2]) {
    uint64_t c_test[2];
    for (int i = 0; i < 9; ++i) {
        xor_rkey(M_xor[i], RK_xor[i], 2, c_test);
        for (int j = 0; j < 2; ++j) {
            if (c_test[j] != C_xor[i][j]) {
                return false;
            }
        }
    }

    return true;
}

uint64_t M_add_rkey[4][2] = {
        {0x1011121314151617, 0x18191A1B1C1D1E1F},
        {0x2A996BD4E2BFE707, 0xEBBDF763CBFA64A5},
        {0x2021222324252627, 0x28292A2B2C2D2E2F},
        {0x95CD566091D32765, 0xB72653E17180F381}};

uint64_t RK_add_rkey[4][2] = {
        {0x16505E6B9B3AB1E6, 0x865B77DCE082A0F4},
        {0xB8AA879A2086A66D, 0xD80A9872E25CD2B0},
        {0x57C816EB3F7E12DE, 0xED2C6B56E6B5BE1A},
        {0x2BBFF92FF9794546, 0xB343FADB28A0D1D4}};

uint64_t C_add_rkey[4][2] = {
        {0x2661707EAF4FC7FD, 0x9E7491F7FC9FBF13},
        {0xE343F36F03468D74, 0xC3C88FD6AE573755},
        {0x77E9390E63A33905, 0x1555958212E2EC49},
        {0xC18D4F908b4C6CAB, 0x6A6A4EBC9A21C555}};

void add_rkey(const uint64_t *M_add, const uint64_t *RK_add, const int C_col, uint64_t *C_add) {
    for (int i = 0; i < C_col; ++i) {
        C_add[i] = M_add[i] + RK_add[i];
    }
}

bool analysis_add_rkey(const uint64_t M_add[4][2], const uint64_t RK_add[4][2], const uint64_t C_add[4][2]) {
    uint64_t c_test[2];
    for (int i = 0; i < 4; ++i) {
        add_rkey(M_add[i], RK_add[i], 2, c_test);
        for (int j = 0; j < 2; ++j) {
            if (c_test[j] != C_add[i][j]) {
                return false;
            }
        }
    }

    return true;
}

uint64_t M_s_row[10][2] = {
        {0x9A2B1EAC76EE891B, 0x914ACF177C98DD3D},
        {0x81D13FB27562EDE1, 0xEA4B5542BFD1F76F},
        {0x8FDA86338F6A9C7A, 0xBEA63AB2ED4D5139},
        {0x249A648F714775DF, 0xE70E2C22E0FE9F0F},
        {0xFA64888131B1FA10, 0x4244C60765ED68AD},
        {0xC5ED3FA44D7990FE, 0x89EE6CDA99647C57},
        {0x1DC39F955397E9F4, 0x146C93B7F3486EE0},
        {0x9AEC1045C38C3593, 0xBBA1164CD70D8003},
        {0x970380C8B39E909A, 0x2C7CF1480055E5E5},
        {0xFF661201789C581D, 0x0374D34D5983C453}};

uint64_t C_s_row[10][2] = {
        {0x9A2B1EAC7C98DD3D, 0x914ACF1776EE891B},
        {0x81D13FB2BFD1F76F, 0xEA4B55427562EDE1},
        {0x8FDA8633ED4D5139, 0xBEA63AB28F6A9C7A},
        {0x249A648FE0FE9F0F, 0xE70E2C22714775DF},
        {0xFA64888165ED68AD, 0x4244C60731B1FA10},
        {0xC5ED3FA499647C57, 0x89EE6CDA4D7990FE},
        {0x1DC39F95F3486EE0, 0x146C93B75397E9F4},
        {0x9AEC1045D70D8003, 0xBBA1164CC38C3593},
        {0x970380C80055E5E5, 0x2C7CF148B39E909A},
        {0xFF6612015983C453, 0x0374D34D789C581D}};

void shift_row(const uint64_t *M, uint64_t *C, int n, int shift, int row_number) {
    for (int s = 0; s < shift; ++s) {
        uint8_t first = ((uint8_t *) &M[0])[row_number];
        for (int j = 0; j < n - 1; ++j) {
            ((uint8_t *) &C[n - 1 - j])[row_number] = ((uint8_t *) &M[j + 1])[row_number];
        }
        ((uint8_t *) &C[0])[row_number] = first;
    }
    if (shift == 0) {
        for (int i = 0; i < n; ++i) {
            ((uint8_t *) &C[n - 1 - i])[row_number] = ((uint8_t *) &M[i])[row_number];
        }
    }
}

void s_row(uint64_t *M, uint64_t *C, int l, int n) {
    for (int i = 0; i < 8; ++i) {
        int shift = l * i / 512;
        shift_row(M, C, n, shift, i);
    }
}

bool analysis_s_row(const uint64_t m_s_row[10][2], int l, const uint64_t c_s_row[10][2]) {
    for (int i = 0; i < 10; ++i) {
        uint64_t c_test[2];
        s_row(const_cast<uint64_t *>(m_s_row[i]), c_test, l, 2);
        for (int j = 0; j < 2; ++j) {
            if (c_test[j] != c_s_row[i][j]) {
                return false;
            }
        }
    }
    return true;
}

uint8_t v[8] = {0x1, 0x1, 0x5, 0x1, 0x8, 0x6, 0x7, 0x4};

uint8_t V_index[8][8] = {
        {0, 0, 2, 0, 5, 3, 4, 1}, // v >>> 0 (у бiк СТАРШИХ індексів (розрядiв))
        {1, 0, 0, 2, 0, 5, 3, 4}, // v >>> 1 для 128-битового блока
        {4, 1, 0, 0, 2, 0, 5, 3}, // v >>> 2
        {3, 4, 1, 0, 0, 2, 0, 5}, // v >>> 3 для 256-битового блока
        {5, 3, 4, 1, 0, 0, 2, 0}, // v >>> 4
        {0, 5, 3, 4, 1, 0, 0, 2}, // v >>> 5
        {2, 0, 5, 3, 4, 1, 0, 0}, // v >>> 6
        {0, 2, 0, 5, 3, 4, 1, 0} // v >>> 7 для 512-битового блока
};


uint8_t s_encr[6][256] = {
        { /* V_index[0]=0 for V[0]=0x01 */
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
                0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
                0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
                0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
                0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
                0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
                0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
                0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
                0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,
                0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,
                0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
                0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
                0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
                0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
                0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF},
        { /* V_index[7]=1 for V[7]=0x04 */
                0x00, 0x04, 0x08, 0x0C, 0x10, 0x14, 0x18, 0x1C, 0x20, 0x24, 0x28, 0x2C, 0x30, 0x34, 0x38, 0x3C,
                0x40, 0x44, 0x48, 0x4C, 0x50, 0x54, 0x58, 0x5C, 0x60, 0x64, 0x68, 0x6C, 0x70, 0x74, 0x78, 0x7C,
                0x80, 0x84, 0x88, 0x8C, 0x90, 0x94, 0x98, 0x9C, 0xA0, 0xA4, 0xA8, 0xAC, 0xB0, 0xB4, 0xB8, 0xBC,
                0xC0, 0xC4, 0xC8, 0xCC, 0xD0, 0xD4, 0xD8, 0xDC, 0xE0, 0xE4, 0xE8, 0xEC, 0xF0, 0xF4, 0xF8, 0xFC,
                0x1D, 0x19, 0x15, 0x11, 0x0D, 0x09, 0x05, 0x01, 0x3D, 0x39, 0x35, 0x31, 0x2D, 0x29, 0x25, 0x21,
                0x5D, 0x59, 0x55, 0x51, 0x4D, 0x49, 0x45, 0x41, 0x7D, 0x79, 0x75, 0x71, 0x6D, 0x69, 0x65, 0x61,
                0x9D, 0x99, 0x95, 0x91, 0x8D, 0x89, 0x85, 0x81, 0xBD, 0xB9, 0xB5, 0xB1, 0xAD, 0xA9, 0xA5, 0xA1,
                0xDD, 0xD9, 0xD5, 0xD1, 0xCD, 0xC9, 0xC5, 0xC1, 0xFD, 0xF9, 0xF5, 0xF1, 0xED, 0xE9, 0xE5, 0xE1,
                0x3A, 0x3E, 0x32, 0x36, 0x2A, 0x2E, 0x22, 0x26, 0x1A, 0x1E, 0x12, 0x16, 0x0A, 0x0E, 0x02, 0x06,
                0x7A, 0x7E, 0x72, 0x76, 0x6A, 0x6E, 0x62, 0x66, 0x5A, 0x5E, 0x52, 0x56, 0x4A, 0x4E, 0x42, 0x46,
                0xBA, 0xBE, 0xB2, 0xB6, 0xAA, 0xAE, 0xA2, 0xA6, 0x9A, 0x9E, 0x92, 0x96, 0x8A, 0x8E, 0x82, 0x86,
                0xFA, 0xFE, 0xF2, 0xF6, 0xEA, 0xEE, 0xE2, 0xE6, 0xDA, 0xDE, 0xD2, 0xD6, 0xCA, 0xCE, 0xC2, 0xC6,
                0x27, 0x23, 0x2F, 0x2B, 0x37, 0x33, 0x3F, 0x3B, 0x07, 0x03, 0x0F, 0x0B, 0x17, 0x13, 0x1F, 0x1B,
                0x67, 0x63, 0x6F, 0x6B, 0x77, 0x73, 0x7F, 0x7B, 0x47, 0x43, 0x4F, 0x4B, 0x57, 0x53, 0x5F, 0x5B,
                0xA7, 0xA3, 0xAF, 0xAB, 0xB7, 0xB3, 0xBF, 0xBB, 0x87, 0x83, 0x8F, 0x8B, 0x97, 0x93, 0x9F, 0x9B,
                0xE7, 0xE3, 0xEF, 0xEB, 0xF7, 0xF3, 0xFF, 0xFB, 0xC7, 0xC3, 0xCF, 0xCB, 0xD7, 0xD3, 0xDF, 0xDB},
        { /* V_index[2]=2 for V[2]=0x05 */
                0x00, 0x05, 0x0A, 0x0F, 0x14, 0x11, 0x1E, 0x1B, 0x28, 0x2D, 0x22, 0x27, 0x3C, 0x39, 0x36, 0x33,
                0x50, 0x55, 0x5A, 0x5F, 0x44, 0x41, 0x4E, 0x4B, 0x78, 0x7D, 0x72, 0x77, 0x6C, 0x69, 0x66, 0x63,
                0xA0, 0xA5, 0xAA, 0xAF, 0xB4, 0xB1, 0xBE, 0xBB, 0x88, 0x8D, 0x82, 0x87, 0x9C, 0x99, 0x96, 0x93,
                0xF0, 0xF5, 0xFA, 0xFF, 0xE4, 0xE1, 0xEE, 0xEB, 0xD8, 0xDD, 0xD2, 0xD7, 0xCC, 0xC9, 0xC6, 0xC3,
                0x5D, 0x58, 0x57, 0x52, 0x49, 0x4C, 0x43, 0x46, 0x75, 0x70, 0x7F, 0x7A, 0x61, 0x64, 0x6B, 0x6E,
                0x0D, 0x08, 0x07, 0x02, 0x19, 0x1C, 0x13, 0x16, 0x25, 0x20, 0x2F, 0x2A, 0x31, 0x34, 0x3B, 0x3E,
                0xFD, 0xF8, 0xF7, 0xF2, 0xE9, 0xEC, 0xE3, 0xE6, 0xD5, 0xD0, 0xDF, 0xDA, 0xC1, 0xC4, 0xCB, 0xCE,
                0xAD, 0xA8, 0xA7, 0xA2, 0xB9, 0xBC, 0xB3, 0xB6, 0x85, 0x80, 0x8F, 0x8A, 0x91, 0x94, 0x9B, 0x9E,
                0xBA, 0xBF, 0xB0, 0xB5, 0xAE, 0xAB, 0xA4, 0xA1, 0x92, 0x97, 0x98, 0x9D, 0x86, 0x83, 0x8C, 0x89,
                0xEA, 0xEF, 0xE0, 0xE5, 0xFE, 0xFB, 0xF4, 0xF1, 0xC2, 0xC7, 0xC8, 0xCD, 0xD6, 0xD3, 0xDC, 0xD9,
                0x1A, 0x1F, 0x10, 0x15, 0x0E, 0x0B, 0x04, 0x01, 0x32, 0x37, 0x38, 0x3D, 0x26, 0x23, 0x2C, 0x29,
                0x4A, 0x4F, 0x40, 0x45, 0x5E, 0x5B, 0x54, 0x51, 0x62, 0x67, 0x68, 0x6D, 0x76, 0x73, 0x7C, 0x79,
                0xE7, 0xE2, 0xED, 0xE8, 0xF3, 0xF6, 0xF9, 0xFC, 0xCF, 0xCA, 0xC5, 0xC0, 0xDB, 0xDE, 0xD1, 0xD4,
                0xB7, 0xB2, 0xBD, 0xB8, 0xA3, 0xA6, 0xA9, 0xAC, 0x9F, 0x9A, 0x95, 0x90, 0x8B, 0x8E, 0x81, 0x84,
                0x47, 0x42, 0x4D, 0x48, 0x53, 0x56, 0x59, 0x5C, 0x6F, 0x6A, 0x65, 0x60, 0x7B, 0x7E, 0x71, 0x74,
                0x17, 0x12, 0x1D, 0x18, 0x03, 0x06, 0x09, 0x0C, 0x3F, 0x3A, 0x35, 0x30, 0x2B, 0x2E, 0x21, 0x24},
        { /* V_index[5]=3 for V[5]=0x06 */
                0x00, 0x06, 0x0C, 0x0A, 0x18, 0x1E, 0x14, 0x12, 0x30, 0x36, 0x3C, 0x3A, 0x28, 0x2E, 0x24, 0x22,
                0x60, 0x66, 0x6C, 0x6A, 0x78, 0x7E, 0x74, 0x72, 0x50, 0x56, 0x5C, 0x5A, 0x48, 0x4E, 0x44, 0x42,
                0xC0, 0xC6, 0xCC, 0xCA, 0xD8, 0xDE, 0xD4, 0xD2, 0xF0, 0xF6, 0xFC, 0xFA, 0xE8, 0xEE, 0xE4, 0xE2,
                0xA0, 0xA6, 0xAC, 0xAA, 0xB8, 0xBE, 0xB4, 0xB2, 0x90, 0x96, 0x9C, 0x9A, 0x88, 0x8E, 0x84, 0x82,
                0x9D, 0x9B, 0x91, 0x97, 0x85, 0x83, 0x89, 0x8F, 0xAD, 0xAB, 0xA1, 0xA7, 0xB5, 0xB3, 0xB9, 0xBF,
                0xFD, 0xFB, 0xF1, 0xF7, 0xE5, 0xE3, 0xE9, 0xEF, 0xCD, 0xCB, 0xC1, 0xC7, 0xD5, 0xD3, 0xD9, 0xDF,
                0x5D, 0x5B, 0x51, 0x57, 0x45, 0x43, 0x49, 0x4F, 0x6D, 0x6B, 0x61, 0x67, 0x75, 0x73, 0x79, 0x7F,
                0x3D, 0x3B, 0x31, 0x37, 0x25, 0x23, 0x29, 0x2F, 0x0D, 0x0B, 0x01, 0x07, 0x15, 0x13, 0x19, 0x1F,
                0x27, 0x21, 0x2B, 0x2D, 0x3F, 0x39, 0x33, 0x35, 0x17, 0x11, 0x1B, 0x1D, 0x0F, 0x09, 0x03, 0x05,
                0x47, 0x41, 0x4B, 0x4D, 0x5F, 0x59, 0x53, 0x55, 0x77, 0x71, 0x7B, 0x7D, 0x6F, 0x69, 0x63, 0x65,
                0xE7, 0xE1, 0xEB, 0xED, 0xFF, 0xF9, 0xF3, 0xF5, 0xD7, 0xD1, 0xDB, 0xDD, 0xCF, 0xC9, 0xC3, 0xC5,
                0x87, 0x81, 0x8B, 0x8D, 0x9F, 0x99, 0x93, 0x95, 0xB7, 0xB1, 0xBB, 0xBD, 0xAF, 0xA9, 0xA3, 0xA5,
                0xBA, 0xBC, 0xB6, 0xB0, 0xA2, 0xA4, 0xAE, 0xA8, 0x8A, 0x8C, 0x86, 0x80, 0x92, 0x94, 0x9E, 0x98,
                0xDA, 0xDC, 0xD6, 0xD0, 0xC2, 0xC4, 0xCE, 0xC8, 0xEA, 0xEC, 0xE6, 0xE0, 0xF2, 0xF4, 0xFE, 0xF8,
                0x7A, 0x7C, 0x76, 0x70, 0x62, 0x64, 0x6E, 0x68, 0x4A, 0x4C, 0x46, 0x40, 0x52, 0x54, 0x5E, 0x58,
                0x1A, 0x1C, 0x16, 0x10, 0x02, 0x04, 0x0E, 0x08, 0x2A, 0x2C, 0x26, 0x20, 0x32, 0x34, 0x3E, 0x38},
        { /* V_index[6]=4 for V[6]=0x07 */
                0x00, 0x07, 0x0E, 0x09, 0x1C, 0x1B, 0x12, 0x15, 0x38, 0x3F, 0x36, 0x31, 0x24, 0x23, 0x2A, 0x2D,
                0x70, 0x77, 0x7E, 0x79, 0x6C, 0x6B, 0x62, 0x65, 0x48, 0x4F, 0x46, 0x41, 0x54, 0x53, 0x5A, 0x5D,
                0xE0, 0xE7, 0xEE, 0xE9, 0xFC, 0xFB, 0xF2, 0xF5, 0xD8, 0xDF, 0xD6, 0xD1, 0xC4, 0xC3, 0xCA, 0xCD,
                0x90, 0x97, 0x9E, 0x99, 0x8C, 0x8B, 0x82, 0x85, 0xA8, 0xAF, 0xA6, 0xA1, 0xB4, 0xB3, 0xBA, 0xBD,
                0xDD, 0xDA, 0xD3, 0xD4, 0xC1, 0xC6, 0xCF, 0xC8, 0xE5, 0xE2, 0xEB, 0xEC, 0xF9, 0xFE, 0xF7, 0xF0,
                0xAD, 0xAA, 0xA3, 0xA4, 0xB1, 0xB6, 0xBF, 0xB8, 0x95, 0x92, 0x9B, 0x9C, 0x89, 0x8E, 0x87, 0x80,
                0x3D, 0x3A, 0x33, 0x34, 0x21, 0x26, 0x2F, 0x28, 0x05, 0x02, 0x0B, 0x0C, 0x19, 0x1E, 0x17, 0x10,
                0x4D, 0x4A, 0x43, 0x44, 0x51, 0x56, 0x5F, 0x58, 0x75, 0x72, 0x7B, 0x7C, 0x69, 0x6E, 0x67, 0x60,
                0xA7, 0xA0, 0xA9, 0xAE, 0xBB, 0xBC, 0xB5, 0xB2, 0x9F, 0x98, 0x91, 0x96, 0x83, 0x84, 0x8D, 0x8A,
                0xD7, 0xD0, 0xD9, 0xDE, 0xCB, 0xCC, 0xC5, 0xC2, 0xEF, 0xE8, 0xE1, 0xE6, 0xF3, 0xF4, 0xFD, 0xFA,
                0x47, 0x40, 0x49, 0x4E, 0x5B, 0x5C, 0x55, 0x52, 0x7F, 0x78, 0x71, 0x76, 0x63, 0x64, 0x6D, 0x6A,
                0x37, 0x30, 0x39, 0x3E, 0x2B, 0x2C, 0x25, 0x22, 0x0F, 0x08, 0x01, 0x06, 0x13, 0x14, 0x1D, 0x1A,
                0x7A, 0x7D, 0x74, 0x73, 0x66, 0x61, 0x68, 0x6F, 0x42, 0x45, 0x4C, 0x4B, 0x5E, 0x59, 0x50, 0x57,
                0x0A, 0x0D, 0x04, 0x03, 0x16, 0x11, 0x18, 0x1F, 0x32, 0x35, 0x3C, 0x3B, 0x2E, 0x29, 0x20, 0x27,
                0x9A, 0x9D, 0x94, 0x93, 0x86, 0x81, 0x88, 0x8F, 0xA2, 0xA5, 0xAC, 0xAB, 0xBE, 0xB9, 0xB0, 0xB7,
                0xEA, 0xED, 0xE4, 0xE3, 0xF6, 0xF1, 0xF8, 0xFF, 0xD2, 0xD5, 0xDC, 0xDB, 0xCE, 0xC9, 0xC0, 0xC7},
        { /* V_index[4]=5 for V[4]=0x08 */
                0x00, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78,
                0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8,
                0x1D, 0x15, 0x0D, 0x05, 0x3D, 0x35, 0x2D, 0x25, 0x5D, 0x55, 0x4D, 0x45, 0x7D, 0x75, 0x6D, 0x65,
                0x9D, 0x95, 0x8D, 0x85, 0xBD, 0xB5, 0xAD, 0xA5, 0xDD, 0xD5, 0xCD, 0xC5, 0xFD, 0xF5, 0xED, 0xE5,
                0x3A, 0x32, 0x2A, 0x22, 0x1A, 0x12, 0x0A, 0x02, 0x7A, 0x72, 0x6A, 0x62, 0x5A, 0x52, 0x4A, 0x42,
                0xBA, 0xB2, 0xAA, 0xA2, 0x9A, 0x92, 0x8A, 0x82, 0xFA, 0xF2, 0xEA, 0xE2, 0xDA, 0xD2, 0xCA, 0xC2,
                0x27, 0x2F, 0x37, 0x3F, 0x07, 0x0F, 0x17, 0x1F, 0x67, 0x6F, 0x77, 0x7F, 0x47, 0x4F, 0x57, 0x5F,
                0xA7, 0xAF, 0xB7, 0xBF, 0x87, 0x8F, 0x97, 0x9F, 0xE7, 0xEF, 0xF7, 0xFF, 0xC7, 0xCF, 0xD7, 0xDF,
                0x74, 0x7C, 0x64, 0x6C, 0x54, 0x5C, 0x44, 0x4C, 0x34, 0x3C, 0x24, 0x2C, 0x14, 0x1C, 0x04, 0x0C,
                0xF4, 0xFC, 0xE4, 0xEC, 0xD4, 0xDC, 0xC4, 0xCC, 0xB4, 0xBC, 0xA4, 0xAC, 0x94, 0x9C, 0x84, 0x8C,
                0x69, 0x61, 0x79, 0x71, 0x49, 0x41, 0x59, 0x51, 0x29, 0x21, 0x39, 0x31, 0x09, 0x01, 0x19, 0x11,
                0xE9, 0xE1, 0xF9, 0xF1, 0xC9, 0xC1, 0xD9, 0xD1, 0xA9, 0xA1, 0xB9, 0xB1, 0x89, 0x81, 0x99, 0x91,
                0x4E, 0x46, 0x5E, 0x56, 0x6E, 0x66, 0x7E, 0x76, 0x0E, 0x06, 0x1E, 0x16, 0x2E, 0x26, 0x3E, 0x36,
                0xCE, 0xC6, 0xDE, 0xD6, 0xEE, 0xE6, 0xFE, 0xF6, 0x8E, 0x86, 0x9E, 0x96, 0xAE, 0xA6, 0xBE, 0xB6,
                0x53, 0x5B, 0x43, 0x4B, 0x73, 0x7B, 0x63, 0x6B, 0x13, 0x1B, 0x03, 0x0B, 0x33, 0x3B, 0x23, 0x2B,
                0xD3, 0xDB, 0xC3, 0xCB, 0xF3, 0xFB, 0xE3, 0xEB, 0x93, 0x9B, 0x83, 0x8B, 0xB3, 0xBB, 0xA3, 0xAB}};


uint8_t M_m_col[10][2][8] = {// [test_no][col][row] G
        {{0x9A, 0x2B, 0x1E, 0xAC, 0x7C, 0x98, 0xDD, 0x3D},
                {0x91, 0x4A, 0xCF, 0x17, 0x76, 0xEE, 0x89, 0x1B}},// 0
        {{0x81, 0xD1, 0x3F, 0xB2, 0xBF, 0xD1, 0xF7, 0x6F},
                {0xEA, 0x4B, 0x55, 0x42, 0x75, 0x62, 0xED, 0xE1}},// 1
        {{0x8F, 0xDA, 0x86, 0x33, 0xED, 0x4D, 0x51, 0x39},
                {0xBE, 0xA6, 0x3A, 0xB2, 0x8F, 0x6A, 0x9C, 0x7A}},// 2
        {{0x24, 0x9A, 0x64, 0x8F, 0xE0, 0xFE, 0x9F, 0x0F},
                {0xE7, 0x0E, 0x2C, 0x22, 0x71, 0x47, 0x75, 0xDF}},// 3
        {{0xFA, 0x64, 0x88, 0x81, 0x65, 0xED, 0x68, 0xAD},
                {0x42, 0x44, 0xC6, 0x07, 0x31, 0xB1, 0xFA, 0x10}},// 4
        {{0xC5, 0xED, 0x3F, 0xA4, 0x99, 0x64, 0x7C, 0x57},
                {0x89, 0xEE, 0x6C, 0xDA, 0x4D, 0x79, 0x90, 0xFE}},// 5
        {{0x1D, 0xC3, 0x9F, 0x95, 0xF3, 0x48, 0x6E, 0xE0},
                {0x14, 0x6C, 0x93, 0xB7, 0x53, 0x97, 0xE9, 0xF4}},// 6
        {{0x9A, 0xEC, 0x10, 0x45, 0xD7, 0x0D, 0x80, 0x03},
                {0xBB, 0xA1, 0x16, 0x4C, 0xC3, 0x8C, 0x35, 0x93}},// 7
        {{0x97, 0x03, 0x80, 0xC8, 0x00, 0x55, 0xE5, 0xE5},
                {0x2C, 0x7C, 0xF1, 0x48, 0xB3, 0x9E, 0x90, 0x9A}},// 8
        {{0xFF, 0x66, 0x12, 0x01, 0x59, 0x83, 0xC4, 0x53},
                {0x03, 0x74, 0xD3, 0x4D, 0x78, 0x9C, 0x58, 0x1D}} // 9
};

uint8_t C_m_col[10][2][8] = {// [test_no][col][row]
        {{0x16, 0xCE, 0xDE, 0xE8, 0xD9, 0x99, 0x0F, 0x9E},
                {0x25, 0xB5, 0x06, 0xF0, 0x42, 0xD3, 0xB3, 0x05}},// 0
        {{0x32, 0xF1, 0x72, 0xC7, 0xE2, 0xD2, 0xE1, 0xC9},
                {0x3B, 0x4D, 0x13, 0x95, 0x8F, 0xBC, 0xE2, 0x8D}},// 1
        {{0x04, 0x4E, 0x67, 0x25, 0x02, 0xE9, 0x45, 0xD3},
                {0x13, 0xF2, 0x41, 0x97, 0x77, 0x3D, 0x45, 0x47}},// 2
        {{0x73, 0xEC, 0x52, 0x1D, 0xA9, 0xBA, 0xF9, 0x77},
                {0x7A, 0x44, 0x21, 0x24, 0x56, 0xFE, 0x02, 0x15}},// 3
        {{0x5D, 0xCB, 0xF7, 0xEE, 0x97, 0x65, 0x34, 0x0D},
                {0x70, 0x0A, 0xB8, 0x6C, 0x7E, 0x3C, 0xFC, 0xBC}},// 4
        {{0x9E, 0xDC, 0xE2, 0xCB, 0x1E, 0x77, 0x4F, 0x27},
                {0x2D, 0x2C, 0x66, 0x28, 0x14, 0x02, 0xB1, 0x4F}},// 5
        {{0x44, 0xB9, 0x0F, 0x55, 0x5C, 0x68, 0x2F, 0x06},
                {0x8F, 0xDB, 0x69, 0x18, 0xB7, 0x10, 0x8E, 0xD5}},// 6
        {{0x10, 0x73, 0xFC, 0xB6, 0xEC, 0xF6, 0x8F, 0x31},
                {0xBC, 0xB7, 0x7E, 0x75, 0x22, 0x20, 0x16, 0x9C}},// 7
        {{0x37, 0x5D, 0xCC, 0x2C, 0x80, 0x0C, 0x45, 0xF6},
                {0x1D, 0xD9, 0xC4, 0x71, 0xE5, 0x22, 0xE0, 0xA6}},// 8
        {{0x2A, 0x99, 0x6B, 0xD4, 0xE2, 0xBF, 0xE7, 0x07},
                {0xEB, 0xBD, 0xF7, 0x63, 0xCB, 0xFA, 0x64, 0xA5}} // 9
};

void m_col_1_col(const uint8_t v_col[8][8], const uint8_t *m_col, const uint8_t s_m_col[6][256], uint8_t *c_col) {
    for (int i = 0; i < 8; ++i) { // C/V rows
        c_col[i] = 0;
        for (int j = 0; j < 8; ++j) { // v/M cols
            c_col[i] ^= s_m_col[v_col[i][j]][m_col[j]];
        }
    }

}

void m_col(const uint8_t m_col[2][8], const uint8_t v_col[8][8], const uint8_t s_m_col[6][256], uint8_t c_col[2][8]) {
    for (int i = 0; i < 2; ++i) { // C/M cols
        m_col_1_col(v_col, m_col[i], s_m_col, c_col[i]);
    }
}

bool analysis_m_col_1_col(const uint8_t *c1, const uint8_t *c2) {
    for (int i = 0; i < 8; ++i) {
        if (c1[i] != c2[i]) {
            return false;
        }
    }

    return true;
}

bool analysis_m_col(const uint8_t M_col[10][2][8], const uint8_t v_col[8][8], const uint8_t s_m_col[6][256],
                 const uint8_t c_col[10][2][8]) {
    for (int i = 0; i < 10; ++i) {
        uint8_t c_test[2][8];
        m_col(M_col[i], v_col, s_m_col, c_test);
        for (int j = 0; j < 2; ++j) {
            if (!analysis_m_col_1_col(c_col[i][j], c_test[j])) {
                return false;
            }
        }
    }

    return true;
}

int main() {
    //1.1
    s_key_inv();
    if (analysis_s_key_inv()) {
        cout << "s_key_inv Everything is OK" << endl;
    } else {
        cout << "s_key_inv Something went wrong" << endl;
        return -1;
    }

    //1.2
    //direct conversion
    if (analysis_s_box(M1_s_box, C1_s_box, s_)) {
        cout << "s_box direct conversion is OK" << endl;
    } else {
        cout << "s_box direct conversion is ERROR" << endl;
        return -1;
    }
    //inverse conversion
    if (analysis_s_box(C1_s_box, M1_s_box, s_inv)) {
        cout << "s_box inverse conversion is OK" << endl;
    } else {
        cout << "s_box inverse conversion is ERROR" << endl;
        return -1;
    }

    //1.3
    if (analysis_xor_rkey(M_xor_rkey, RK_xor_rkey, C_xor_rkey)) {
        cout << "xor_rkey Everything is OK" << endl;
    } else {
        cout << "xor_rkey Something went wrong" << endl;
        return -1;
    }

    //1.4
    if (analysis_add_rkey(M_add_rkey, RK_add_rkey, C_add_rkey)) {
        cout << "add_rkey Everything is OK" << endl;
    } else {
        cout << "add_rkey Something went wrong" << endl;
        return -1;
    }

    //1.5
    if (analysis_s_row(M_s_row, 128, C_s_row)) {
        cout << "s_row Everything is OK" << endl;
    } else {
        cout << "s_row Something went wrong" << endl;
        return -1;
    }


    //1.6
    if (analysis_m_col(M_m_col, V_index, s_encr, C_m_col)) {
        cout << "m_col Everything is OK" << endl;
    } else {
        cout << "m_col Something went wrong" << endl;
        return -1;
    }

    return 0;
}